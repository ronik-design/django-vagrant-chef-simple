"""
Home inventory

"""
from django.core.exceptions import ObjectDoesNotExist

from survey_browser.models import Participant, ParticipantContactInstance, LimeToken
from survey_browser.models import AnswerOption
from survey_browser.models import HomeInventory, ResidenceEntrance, ResidenceRoom, ResidenceInteriorDoor, ResidenceInteriorStair

from helper_functions import handle_null_or_blank

class lime_survey_49672:
    col_names = ["id",
            "submitdate",
            "lastpage",
            "startlanguage",
            "token",
            "49672X209X11303PID2", # other res 1; PID is numerical portion at start of token (5)
            "49672X209X11303PID3", # other res 2
            "49672X209X11303PID4", # other res 3
            "49672X209X11340", # nstories
            "49672X209X11335Attic", # start has feature (9)
            "49672X209X11335Bsmt",
            "49672X209X11335Crwl",
            "49672X209X11335Slab",
            "49672X209X11335SwmIn",
            "49672X209X11335SwmAb",
            "49672X209X11335HtTub", # end has feature
            "49672X209X12586", # noteworthy (16)
            "49672X209X11311CntAC", # cool start
            "49672X209X11311PrtAC",
            "49672X209X11311WndAC",
            "49672X209X11311NoAC",
            "49672X209X11311other", # cool end
            "49672X209X11307CntHt", # heat start
            "49672X209X11307Fire",
            "49672X209X11307PrtHt",
            "49672X209X11307Radtr",
            "49672X209X11307other", # heat end
            "49672X211X11414BedFt", # bed ft (27)
            "49672X211X11414BedIn", # bed in
            "49672X211X11417", # bed size
            "49672X211X11417other", # bed size other
            "49672X211X11418", # bed adjustable (y/n)
            "49672X210X11341", # start entrace headers [blank]
            "49672X210X11387",
            "49672X210X11388",
            "49672X210X11344",
            "49672X210X11345",
            "49672X210X11346",
            "49672X210X11347",
            "49672X210X11348",
            "49672X210X11349",
            "49672X210X11350", # end
            "49672X210X11351", # start entrance A (42)
            "49672X210X11352",
            "49672X210X11352other",
            "49672X210X11357",
            "49672X210X11357other",
            "49672X210X11354",
            "49672X210X11355",
            "49672X210X11355other",
            "49672X210X11356Ft",
            "49672X210X11356In",
            "49672X210X11358",
            "49672X210X11358other",
            "49672X210X11359",
            "49672X210X11353",
            "49672X210X11420",
            "49672X210X11429", # start entrance B (57)
            "49672X210X11430",
            "49672X210X11430other",
            "49672X210X11431",
            "49672X210X11431other",
            "49672X210X11432",
            "49672X210X11433",
            "49672X210X11433other",
            "49672X210X11434Ft",
            "49672X210X11434In",
            "49672X210X11437",
            "49672X210X11437other",
            "49672X210X11438",
            "49672X210X11439",
            "49672X210X11440",
            "49672X210X11441", # start entrance C
            "49672X210X11442",
            "49672X210X11442other",
            "49672X210X11443",
            "49672X210X11443other",
            "49672X210X11444",
            "49672X210X11445",
            "49672X210X11445other",
            "49672X210X11446Ft",
            "49672X210X11446In",
            "49672X210X11449",
            "49672X210X11449other",
            "49672X210X11450",
            "49672X210X11451",
            "49672X210X11452",
            "49672X210X11453", # start entrance D
            "49672X210X11454",
            "49672X210X11454other",
            "49672X210X11455",
            "49672X210X11455other",
            "49672X210X11456",
            "49672X210X11457",
            "49672X210X11457other",
            "49672X210X11458Ft",
            "49672X210X11458In",
            "49672X210X11461",
            "49672X210X11461other",
            "49672X210X11462",
            "49672X210X11463",
            "49672X210X11464",
            "49672X210X11465", # start entrance E
            "49672X210X11466",
            "49672X210X11466other",
            "49672X210X11467",
            "49672X210X11467other",
            "49672X210X11468",
            "49672X210X11469",
            "49672X210X11469other",
            "49672X210X11470Ft",
            "49672X210X11470In",
            "49672X210X11473",
            "49672X210X11473other",
            "49672X210X11474",
            "49672X210X11475",
            "49672X210X11476",
            "49672X210X11477", # start entrance F
            "49672X210X11478",
            "49672X210X11478other",
            "49672X210X11479",
            "49672X210X11479other",
            "49672X210X11480",
            "49672X210X11481",
            "49672X210X11481other",
            "49672X210X11482Ft",
            "49672X210X11482In",
            "49672X210X11485",
            "49672X210X11485other",
            "49672X210X11486",
            "49672X210X11487",
            "49672X210X11488",
            "49672X210X11489", # start entrance G
            "49672X210X11490",
            "49672X210X11490other",
            "49672X210X11491",
            "49672X210X11491other",
            "49672X210X11492",
            "49672X210X11493",
            "49672X210X11493other",
            "49672X210X11494Ft",
            "49672X210X11494In",
            "49672X210X11497",
            "49672X210X11497other",
            "49672X210X11498",
            "49672X210X11499",
            "49672X210X11500",
            "49672X210X11501", # start entrance H
            "49672X210X11502",
            "49672X210X11502other",
            "49672X210X11503",
            "49672X210X11503other",
            "49672X210X11504",
            "49672X210X11505",
            "49672X210X11505other",
            "49672X210X11506Ft",
            "49672X210X11506In",
            "49672X210X11509",
            "49672X210X11509other",
            "49672X210X11510",
            "49672X210X11511",
            "49672X210X11512",
            "49672X210X11513", # start entrance I
            "49672X210X11514",
            "49672X210X11514other",
            "49672X210X11515",
            "49672X210X11515other",
            "49672X210X11516",
            "49672X210X11517",
            "49672X210X11517other",
            "49672X210X11518Ft",
            "49672X210X11518In",
            "49672X210X11521",
            "49672X210X11521other",
            "49672X210X11522",
            "49672X210X11523",
            "49672X210X11524",
            "49672X193X11069", # start room list headers [blank]
            "49672X193X11070",
            "49672X193X11091",
            "49672X193X11180",
            "49672X193X11073",
            "49672X193X11071",
            "49672X193X11282",
            "49672X193X11072",
            "49672X193X11283",
            "49672X193X11074", # start room list headers
            "49672X193X11075", # start room 1
            "49672X193X11076",
            "49672X193X11076other",
            "49672X193X11093",
            "49672X193X11093other",
            "49672X193X11181",
            "49672X193X11079",
            "49672X193X11079other",
            "49672X193X11077",
            "49672X193X11284Ft",
            "49672X193X11284In",
            "49672X193X11078Ft",
            "49672X193X11078In",
            "49672X193X11285Power",
            "49672X193X11285Phone",
            "49672X193X11285Cable",
            "49672X193X11183",
            "49672X193X11525", # start room 2
            "49672X193X11526",
            "49672X193X11526other",
            "49672X193X11527",
            "49672X193X11527other",
            "49672X193X11528",
            "49672X193X11529",
            "49672X193X11529other",
            "49672X193X11530",
            "49672X193X11531Ft",
            "49672X193X11531In",
            "49672X193X11534Ft",
            "49672X193X11534In",
            "49672X193X11537Power",
            "49672X193X11537Phone",
            "49672X193X11537Cable",
            "49672X193X11541",
            "49672X193X11542", # start room 3
            "49672X193X11543",
            "49672X193X11543other",
            "49672X193X11544",
            "49672X193X11544other",
            "49672X193X11545",
            "49672X193X11546",
            "49672X193X11546other",
            "49672X193X11547",
            "49672X193X11548Ft",
            "49672X193X11548In",
            "49672X193X11551Ft",
            "49672X193X11551In",
            "49672X193X11554Power",
            "49672X193X11554Phone",
            "49672X193X11554Cable",
            "49672X193X11558",
            "49672X193X11559", # start room 4
            "49672X193X11560",
            "49672X193X11560other",
            "49672X193X11561",
            "49672X193X11561other",
            "49672X193X11562",
            "49672X193X11563",
            "49672X193X11563other",
            "49672X193X11564",
            "49672X193X11565Ft",
            "49672X193X11565In",
            "49672X193X11568Ft",
            "49672X193X11568In",
            "49672X193X11571Power",
            "49672X193X11571Phone",
            "49672X193X11571Cable",
            "49672X193X11575",
            "49672X193X11576", # start room 5
            "49672X193X11577",
            "49672X193X11577other",
            "49672X193X11578",
            "49672X193X11578other",
            "49672X193X11579",
            "49672X193X11580",
            "49672X193X11580other",
            "49672X193X11581",
            "49672X193X11582Ft",
            "49672X193X11582In",
            "49672X193X11585Ft",
            "49672X193X11585In",
            "49672X193X11588Power",
            "49672X193X11588Phone",
            "49672X193X11588Cable",
            "49672X193X11592",
            "49672X193X11593", # start room 6
            "49672X193X11594",
            "49672X193X11594other",
            "49672X193X11595",
            "49672X193X11595other",
            "49672X193X11596",
            "49672X193X11597",
            "49672X193X11597other",
            "49672X193X11598",
            "49672X193X11599Ft",
            "49672X193X11599In",
            "49672X193X11602Ft",
            "49672X193X11602In",
            "49672X193X11605Power",
            "49672X193X11605Phone",
            "49672X193X11605Cable",
            "49672X193X11609",
            "49672X193X12321", # label repeat start [blank]
            "49672X193X12322",
            "49672X193X12323",
            "49672X193X12324",
            "49672X193X12325",
            "49672X193X12326",
            "49672X193X12327",
            "49672X193X12328",
            "49672X193X12329",
            "49672X193X12330", # label repeat end
            "49672X193X11610", # start room 7
            "49672X193X11611",
            "49672X193X11611other",
            "49672X193X11612",
            "49672X193X11612other",
            "49672X193X11613",
            "49672X193X11614",
            "49672X193X11614other",
            "49672X193X11615",
            "49672X193X11616Ft",
            "49672X193X11616In",
            "49672X193X11619Ft",
            "49672X193X11619In",
            "49672X193X11622Power",
            "49672X193X11622Phone",
            "49672X193X11622Cable",
            "49672X193X11626",
            "49672X193X11627", # start room 8
            "49672X193X11628",
            "49672X193X11628other",
            "49672X193X11629",
            "49672X193X11629other",
            "49672X193X11630",
            "49672X193X11631",
            "49672X193X11631other",
            "49672X193X11632",
            "49672X193X11633Ft",
            "49672X193X11633In",
            "49672X193X11636Ft",
            "49672X193X11636In",
            "49672X193X11639Power",
            "49672X193X11639Phone",
            "49672X193X11639Cable",
            "49672X193X11643",
            "49672X193X11644", # start room 9
            "49672X193X11645",
            "49672X193X11645other",
            "49672X193X11646",
            "49672X193X11646other",
            "49672X193X11647",
            "49672X193X11648",
            "49672X193X11648other",
            "49672X193X11649",
            "49672X193X11650Ft",
            "49672X193X11650In",
            "49672X193X11653Ft",
            "49672X193X11653In",
            "49672X193X11656Power",
            "49672X193X11656Phone",
            "49672X193X11656Cable",
            "49672X193X11660",
            "49672X193X11661", # start room 10
            "49672X193X11662",
            "49672X193X11662other",
            "49672X193X11663",
            "49672X193X11663other",
            "49672X193X11664",
            "49672X193X11665",
            "49672X193X11665other",
            "49672X193X11666",
            "49672X193X11667Ft",
            "49672X193X11667In",
            "49672X193X11670Ft",
            "49672X193X11670In",
            "49672X193X11673Power",
            "49672X193X11673Phone",
            "49672X193X11673Cable",
            "49672X193X11677",
            "49672X193X11678", # start room 11
            "49672X193X11679",
            "49672X193X11679other",
            "49672X193X11680",
            "49672X193X11680other",
            "49672X193X11681",
            "49672X193X11682",
            "49672X193X11682other",
            "49672X193X11683",
            "49672X193X11684Ft",
            "49672X193X11684In",
            "49672X193X11687Ft",
            "49672X193X11687In",
            "49672X193X11690Power",
            "49672X193X11690Phone",
            "49672X193X11690Cable",
            "49672X193X11694",
            "49672X193X11695", # start room 12
            "49672X193X11696",
            "49672X193X11696other",
            "49672X193X11697",
            "49672X193X11697other",
            "49672X193X11698",
            "49672X193X11699",
            "49672X193X11699other",
            "49672X193X11700",
            "49672X193X11701Ft",
            "49672X193X11701In",
            "49672X193X11704Ft",
            "49672X193X11704In",
            "49672X193X11707Power",
            "49672X193X11707Phone",
            "49672X193X11707Cable",
            "49672X193X11711",
            "49672X193X12331", # label repeat start [blank]
            "49672X193X12332",
            "49672X193X12333",
            "49672X193X12334",
            "49672X193X12335",
            "49672X193X12336",
            "49672X193X12337",
            "49672X193X12338",
            "49672X193X12339",
            "49672X193X12340", # label repeat end
            "49672X193X11712", # start room 13
            "49672X193X11713",
            "49672X193X11713other",
            "49672X193X11714",
            "49672X193X11714other",
            "49672X193X11715",
            "49672X193X11716",
            "49672X193X11716other",
            "49672X193X11717",
            "49672X193X11718Ft",
            "49672X193X11718In",
            "49672X193X11721Ft",
            "49672X193X11721In",
            "49672X193X11724Power",
            "49672X193X11724Phone",
            "49672X193X11724Cable",
            "49672X193X11728",
            "49672X193X11729", # start room 14
            "49672X193X11730",
            "49672X193X11730other",
            "49672X193X11731",
            "49672X193X11731other",
            "49672X193X11732",
            "49672X193X11733",
            "49672X193X11733other",
            "49672X193X11734",
            "49672X193X11735Ft",
            "49672X193X11735In",
            "49672X193X11738Ft",
            "49672X193X11738In",
            "49672X193X11741Power",
            "49672X193X11741Phone",
            "49672X193X11741Cable",
            "49672X193X11745",
            "49672X193X11746", # start room 15
            "49672X193X11747",
            "49672X193X11747other",
            "49672X193X11748",
            "49672X193X11748other",
            "49672X193X11749",
            "49672X193X11750",
            "49672X193X11750other",
            "49672X193X11751",
            "49672X193X11752Ft",
            "49672X193X11752In",
            "49672X193X11755Ft",
            "49672X193X11755In",
            "49672X193X11758Power",
            "49672X193X11758Phone",
            "49672X193X11758Cable",
            "49672X193X11762",
            "49672X193X11763", # start room 16
            "49672X193X11764",
            "49672X193X11764other",
            "49672X193X11765",
            "49672X193X11765other",
            "49672X193X11766",
            "49672X193X11767",
            "49672X193X11767other",
            "49672X193X11768",
            "49672X193X11769Ft",
            "49672X193X11769In",
            "49672X193X11772Ft",
            "49672X193X11772In",
            "49672X193X11775Power",
            "49672X193X11775Phone",
            "49672X193X11775Cable",
            "49672X193X11779",
            "49672X193X11781", # start room 17
            "49672X193X11782",
            "49672X193X11782other",
            "49672X193X11783",
            "49672X193X11783other",
            "49672X193X11784",
            "49672X193X11785",
            "49672X193X11785other",
            "49672X193X11786",
            "49672X193X11787Ft",
            "49672X193X11787In",
            "49672X193X11790Ft",
            "49672X193X11790In",
            "49672X193X11793Power",
            "49672X193X11793Phone",
            "49672X193X11793Cable",
            "49672X193X11797",
            "49672X193X11798", # start room 18
            "49672X193X11799",
            "49672X193X11799other",
            "49672X193X11800",
            "49672X193X11800other",
            "49672X193X11801",
            "49672X193X11802",
            "49672X193X11802other",
            "49672X193X11803",
            "49672X193X11804Ft",
            "49672X193X11804In",
            "49672X193X11807Ft",
            "49672X193X11807In",
            "49672X193X11810Power",
            "49672X193X11810Phone",
            "49672X193X11810Cable",
            "49672X193X11814",
            "49672X193X12341", # label repeat start [blank]
            "49672X193X12342",
            "49672X193X12343",
            "49672X193X12344",
            "49672X193X12345",
            "49672X193X12346",
            "49672X193X12347",
            "49672X193X12348",
            "49672X193X12349",
            "49672X193X12350", # label repeat end
            "49672X193X11815", # start room 19
            "49672X193X11816",
            "49672X193X11816other",
            "49672X193X11817",
            "49672X193X11817other",
            "49672X193X11818",
            "49672X193X11819",
            "49672X193X11819other",
            "49672X193X11820",
            "49672X193X11821Ft",
            "49672X193X11821In",
            "49672X193X11824Ft",
            "49672X193X11824In",
            "49672X193X11827Power",
            "49672X193X11827Phone",
            "49672X193X11827Cable",
            "49672X193X11831",
            "49672X193X11832", # start room 20
            "49672X193X11833",
            "49672X193X11833other",
            "49672X193X11834",
            "49672X193X11834other",
            "49672X193X11835",
            "49672X193X11836",
            "49672X193X11836other",
            "49672X193X11837",
            "49672X193X11838Ft",
            "49672X193X11838In",
            "49672X193X11841Ft",
            "49672X193X11841In",
            "49672X193X11844Power",
            "49672X193X11844Phone",
            "49672X193X11844Cable",
            "49672X193X11848",
            "49672X193X11849", # start room 21
            "49672X193X11850",
            "49672X193X11850other",
            "49672X193X11851",
            "49672X193X11851other",
            "49672X193X11852",
            "49672X193X11853",
            "49672X193X11853other",
            "49672X193X11854",
            "49672X193X11855Ft",
            "49672X193X11855In",
            "49672X193X11858Ft",
            "49672X193X11858In",
            "49672X193X11861Power",
            "49672X193X11861Phone",
            "49672X193X11861Cable",
            "49672X193X11865",
            "49672X193X11866", # start room 22
            "49672X193X11867",
            "49672X193X11867other",
            "49672X193X11868",
            "49672X193X11868other",
            "49672X193X11869",
            "49672X193X11870",
            "49672X193X11870other",
            "49672X193X11871",
            "49672X193X11872Ft",
            "49672X193X11872In",
            "49672X193X11875Ft",
            "49672X193X11875In",
            "49672X193X11878Power",
            "49672X193X11878Phone",
            "49672X193X11878Cable",
            "49672X193X11882",
            "49672X193X11883", # start room 23
            "49672X193X11884",
            "49672X193X11884other",
            "49672X193X11885",
            "49672X193X11885other",
            "49672X193X11886",
            "49672X193X11887",
            "49672X193X11887other",
            "49672X193X11888",
            "49672X193X11889Ft",
            "49672X193X11889In",
            "49672X193X11892Ft",
            "49672X193X11892In",
            "49672X193X11895Power",
            "49672X193X11895Phone",
            "49672X193X11895Cable",
            "49672X193X11899",
            "49672X193X11900", # start room 24
            "49672X193X11901",
            "49672X193X11901other",
            "49672X193X11902",
            "49672X193X11902other",
            "49672X193X11903",
            "49672X193X11904",
            "49672X193X11904other",
            "49672X193X11905",
            "49672X193X11906Ft",
            "49672X193X11906In",
            "49672X193X11909Ft",
            "49672X193X11909In",
            "49672X193X11912Power",
            "49672X193X11912Phone",
            "49672X193X11912Cable",
            "49672X193X11916",
            "49672X193X12351", # label repeat start [blank]
            "49672X193X12352",
            "49672X193X12353",
            "49672X193X12354",
            "49672X193X12355",
            "49672X193X12356",
            "49672X193X12357",
            "49672X193X12358",
            "49672X193X12359",
            "49672X193X12360", # label repeat end
            "49672X193X11917", # start room 25
            "49672X193X11918",
            "49672X193X11918other",
            "49672X193X11919",
            "49672X193X11919other",
            "49672X193X11920",
            "49672X193X11921",
            "49672X193X11921other",
            "49672X193X11922",
            "49672X193X11923Ft",
            "49672X193X11923In",
            "49672X193X11926Ft",
            "49672X193X11926In",
            "49672X193X11929Power",
            "49672X193X11929Phone",
            "49672X193X11929Cable",
            "49672X193X11933",
            "49672X193X11934", # start room 26
            "49672X193X11935",
            "49672X193X11935other",
            "49672X193X11936",
            "49672X193X11936other",
            "49672X193X11937",
            "49672X193X11938",
            "49672X193X11938other",
            "49672X193X11939",
            "49672X193X11940Ft",
            "49672X193X11940In",
            "49672X193X11943Ft",
            "49672X193X11943In",
            "49672X193X11946Power",
            "49672X193X11946Phone",
            "49672X193X11946Cable",
            "49672X193X11950",
            "49672X193X11951", # start room 27
            "49672X193X11952",
            "49672X193X11952other",
            "49672X193X11953",
            "49672X193X11953other",
            "49672X193X11954",
            "49672X193X11955",
            "49672X193X11955other",
            "49672X193X11956",
            "49672X193X11957Ft",
            "49672X193X11957In",
            "49672X193X11960Ft",
            "49672X193X11960In",
            "49672X193X11963Power",
            "49672X193X11963Phone",
            "49672X193X11963Cable",
            "49672X193X11967",
            "49672X193X11968", # start room 28
            "49672X193X11969",
            "49672X193X11969other",
            "49672X193X11970",
            "49672X193X11970other",
            "49672X193X11971",
            "49672X193X11972",
            "49672X193X11972other",
            "49672X193X11973",
            "49672X193X11974Ft",
            "49672X193X11974In",
            "49672X193X11977Ft",
            "49672X193X11977In",
            "49672X193X11980Power",
            "49672X193X11980Phone",
            "49672X193X11980Cable",
            "49672X193X11984",
            "49672X193X11985", # start room 29
            "49672X193X11986",
            "49672X193X11986other",
            "49672X193X11987",
            "49672X193X11987other",
            "49672X193X11988",
            "49672X193X11989",
            "49672X193X11989other",
            "49672X193X11990",
            "49672X193X11991Ft",
            "49672X193X11991In",
            "49672X193X11994Ft",
            "49672X193X11994In",
            "49672X193X11997Power",
            "49672X193X11997Phone",
            "49672X193X11997Cable",
            "49672X193X12001",
            "49672X193X12002", # start room 30
            "49672X193X12003",
            "49672X193X12003other",
            "49672X193X12004",
            "49672X193X12004other",
            "49672X193X12005",
            "49672X193X12006",
            "49672X193X12006other",
            "49672X193X12007",
            "49672X193X12008Ft",
            "49672X193X12008In",
            "49672X193X12011Ft",
            "49672X193X12011In",
            "49672X193X12014Power",
            "49672X193X12014Phone",
            "49672X193X12014Cable",
            "49672X193X12018",
            "49672X194X11094", # start section interior doors headers [blank]
            "49672X194X11095",
            "49672X194X11096",
            "49672X194X11104",
            "49672X194X11097",
            "49672X194X11171", # end section interior doors headers
            "49672X194X11103", # interior door 1
            "49672X194X11108",
            "49672X194X11108other",
            "49672X194X11315",
            "49672X194X11315other",
            "49672X194X11105Ft",
            "49672X194X11105In",
            "49672X194X11400",
            "49672X194X11400other",
            "49672X194X11172",
            "49672X194X12019", # interior door 2
            "49672X194X12020",
            "49672X194X12020other",
            "49672X194X12021",
            "49672X194X12021other",
            "49672X194X12022Ft",
            "49672X194X12022In",
            "49672X194X12025",
            "49672X194X12025other",
            "49672X194X12026",
            "49672X194X12027", # interior door 3
            "49672X194X12028",
            "49672X194X12028other",
            "49672X194X12029",
            "49672X194X12029other",
            "49672X194X12030Ft",
            "49672X194X12030In",
            "49672X194X12033",
            "49672X194X12033other",
            "49672X194X12034",
            "49672X194X12035", # interior door 4
            "49672X194X12036",
            "49672X194X12036other",
            "49672X194X12037",
            "49672X194X12037other",
            "49672X194X12038Ft",
            "49672X194X12038In",
            "49672X194X12041",
            "49672X194X12041other",
            "49672X194X12042",
            "49672X194X12043", # interior door 5
            "49672X194X12044",
            "49672X194X12044other",
            "49672X194X12045",
            "49672X194X12045other",
            "49672X194X12046Ft",
            "49672X194X12046In",
            "49672X194X12049",
            "49672X194X12049other",
            "49672X194X12050",
            "49672X194X12051", # interior door 6
            "49672X194X12052",
            "49672X194X12052other",
            "49672X194X12053",
            "49672X194X12053other",
            "49672X194X12054Ft",
            "49672X194X12054In",
            "49672X194X12057",
            "49672X194X12057other",
            "49672X194X12058",
            "49672X194X12371", # start relabel [blank]
            "49672X194X12372",
            "49672X194X12373",
            "49672X194X12374",
            "49672X194X12375",
            "49672X194X12376", # end relabel
            "49672X194X12059", # interior door 7
            "49672X194X12060",
            "49672X194X12060other",
            "49672X194X12061",
            "49672X194X12061other",
            "49672X194X12062Ft",
            "49672X194X12062In",
            "49672X194X12065",
            "49672X194X12065other",
            "49672X194X12066",
            "49672X194X12067", # interior door 8
            "49672X194X12068",
            "49672X194X12068other",
            "49672X194X12069",
            "49672X194X12069other",
            "49672X194X12070Ft",
            "49672X194X12070In",
            "49672X194X12073",
            "49672X194X12073other",
            "49672X194X12074",
            "49672X194X12075", # interior door 9
            "49672X194X12076",
            "49672X194X12076other",
            "49672X194X12077",
            "49672X194X12077other",
            "49672X194X12078Ft",
            "49672X194X12078In",
            "49672X194X12081",
            "49672X194X12081other",
            "49672X194X12082",
            "49672X194X12083", # interior door 10
            "49672X194X12084",
            "49672X194X12084other",
            "49672X194X12085",
            "49672X194X12085other",
            "49672X194X12086Ft",
            "49672X194X12086In",
            "49672X194X12089",
            "49672X194X12089other",
            "49672X194X12090",
            "49672X194X12091", # interior door 11
            "49672X194X12092",
            "49672X194X12092other",
            "49672X194X12093",
            "49672X194X12093other",
            "49672X194X12094Ft",
            "49672X194X12094In",
            "49672X194X12097",
            "49672X194X12097other",
            "49672X194X12098",
            "49672X194X12099", # interior door 12
            "49672X194X12100",
            "49672X194X12100other",
            "49672X194X12101",
            "49672X194X12101other",
            "49672X194X12102Ft",
            "49672X194X12102In",
            "49672X194X12105",
            "49672X194X12105other",
            "49672X194X12106",
            "49672X194X12377", # start relabel [blank]
            "49672X194X12378",
            "49672X194X12379",
            "49672X194X12380",
            "49672X194X12381",
            "49672X194X12382", # end relabel
            "49672X194X12107", # interior door 13
            "49672X194X12108",
            "49672X194X12108other",
            "49672X194X12109",
            "49672X194X12109other",
            "49672X194X12110Ft",
            "49672X194X12110In",
            "49672X194X12113",
            "49672X194X12113other",
            "49672X194X12114",
            "49672X194X12115", # interior door 14
            "49672X194X12116",
            "49672X194X12116other",
            "49672X194X12117",
            "49672X194X12117other",
            "49672X194X12118Ft",
            "49672X194X12118In",
            "49672X194X12121",
            "49672X194X12121other",
            "49672X194X12122",
            "49672X194X12123", # interior door 15
            "49672X194X12124",
            "49672X194X12124other",
            "49672X194X12125",
            "49672X194X12125other",
            "49672X194X12126Ft",
            "49672X194X12126In",
            "49672X194X12129",
            "49672X194X12129other",
            "49672X194X12130",
            "49672X194X12131", # interior door 16
            "49672X194X12132",
            "49672X194X12132other",
            "49672X194X12133",
            "49672X194X12133other",
            "49672X194X12134Ft",
            "49672X194X12134In",
            "49672X194X12137",
            "49672X194X12137other",
            "49672X194X12138",
            "49672X194X12139", # interior door 17
            "49672X194X12140",
            "49672X194X12140other",
            "49672X194X12141",
            "49672X194X12141other",
            "49672X194X12142Ft",
            "49672X194X12142In",
            "49672X194X12145",
            "49672X194X12145other",
            "49672X194X12146",
            "49672X194X12147", # interior door 18
            "49672X194X12148",
            "49672X194X12148other",
            "49672X194X12149",
            "49672X194X12149other",
            "49672X194X12150Ft",
            "49672X194X12150In",
            "49672X194X12153",
            "49672X194X12153other",
            "49672X194X12154",
            "49672X194X12383", # start relabel [blank]
            "49672X194X12384",
            "49672X194X12385",
            "49672X194X12386",
            "49672X194X12387",
            "49672X194X12388", # end relabel
            "49672X194X12155", # interior door 19
            "49672X194X12156",
            "49672X194X12156other",
            "49672X194X12157",
            "49672X194X12157other",
            "49672X194X12158Ft",
            "49672X194X12158In",
            "49672X194X12161",
            "49672X194X12161other",
            "49672X194X12162",
            "49672X194X12163", # interior door 20
            "49672X194X12164",
            "49672X194X12164other",
            "49672X194X12165",
            "49672X194X12165other",
            "49672X194X12166Ft",
            "49672X194X12166In",
            "49672X194X12169",
            "49672X194X12169other",
            "49672X194X12170",
            "49672X194X12171", # interior door 21
            "49672X194X12172",
            "49672X194X12172other",
            "49672X194X12173",
            "49672X194X12173other",
            "49672X194X12174Ft",
            "49672X194X12174In",
            "49672X194X12177",
            "49672X194X12177other",
            "49672X194X12178",
            "49672X194X12179", # interior door 22
            "49672X194X12180",
            "49672X194X12180other",
            "49672X194X12181",
            "49672X194X12181other",
            "49672X194X12182Ft",
            "49672X194X12182In",
            "49672X194X12185",
            "49672X194X12185other",
            "49672X194X12186",
            "49672X194X12187", # interior door 23
            "49672X194X12188",
            "49672X194X12188other",
            "49672X194X12189",
            "49672X194X12189other",
            "49672X194X12190Ft",
            "49672X194X12190In",
            "49672X194X12193",
            "49672X194X12193other",
            "49672X194X12194",
            "49672X194X12195", # interior door 24
            "49672X194X12196",
            "49672X194X12196other",
            "49672X194X12197",
            "49672X194X12197other",
            "49672X194X12198Ft",
            "49672X194X12198In",
            "49672X194X12201",
            "49672X194X12201other",
            "49672X194X12202",
            "49672X194X12389", # start relabel [blank]
            "49672X194X12390",
            "49672X194X12391",
            "49672X194X12392",
            "49672X194X12393",
            "49672X194X12394", # end relabel
            "49672X194X12203", # interior door 25
            "49672X194X12204",
            "49672X194X12204other",
            "49672X194X12205",
            "49672X194X12205other",
            "49672X194X12206Ft",
            "49672X194X12206In",
            "49672X194X12209",
            "49672X194X12209other",
            "49672X194X12210",
            "49672X194X12211", # interior door 26
            "49672X194X12212",
            "49672X194X12212other",
            "49672X194X12213",
            "49672X194X12213other",
            "49672X194X12214Ft",
            "49672X194X12214In",
            "49672X194X12217",
            "49672X194X12217other",
            "49672X194X12218",
            "49672X194X12219", # interior door 27
            "49672X194X12220",
            "49672X194X12220other",
            "49672X194X12221",
            "49672X194X12221other",
            "49672X194X12222Ft",
            "49672X194X12222In",
            "49672X194X12225",
            "49672X194X12225other",
            "49672X194X12226",
            "49672X194X12227", # interior door 28
            "49672X194X12228",
            "49672X194X12228other",
            "49672X194X12229",
            "49672X194X12229other",
            "49672X194X12230Ft",
            "49672X194X12230In",
            "49672X194X12233",
            "49672X194X12233other",
            "49672X194X12234",
            "49672X194X12235", # interior door 29
            "49672X194X12236",
            "49672X194X12236other",
            "49672X194X12237",
            "49672X194X12237other",
            "49672X194X12238Ft",
            "49672X194X12238In",
            "49672X194X12241",
            "49672X194X12241other",
            "49672X194X12242",
            "49672X194X12243", # interior door 30
            "49672X194X12244",
            "49672X194X12244other",
            "49672X194X12245",
            "49672X194X12245other",
            "49672X194X12246Ft",
            "49672X194X12246In",
            "49672X194X12249",
            "49672X194X12249other",
            "49672X194X12250",
            "49672X196X11128", # start header interior stairs [blank]
            "49672X196X11421",
            "49672X196X11427",
            "49672X196X11133",
            "49672X196X11129",
            "49672X196X11131",
            "49672X196X11132",
            "49672X196X11134", # end header interior stairs
            "49672X196X11135", # interior stair 1
            "49672X196X11423",
            "49672X196X11423other",
            "49672X196X11424",
            "49672X196X11424other",
            "49672X196X11140",
            "49672X196X11140other",
            "49672X196X11170",
            "49672X196X11136",
            "49672X196X11136other",
            "49672X196X11138SQ001",
            "49672X196X11138SQ002",
            "49672X196X11141",
            "49672X196X12251", # interior stair 2
            "49672X196X12252",
            "49672X196X12252other",
            "49672X196X12253",
            "49672X196X12253other",
            "49672X196X12254",
            "49672X196X12254other",
            "49672X196X12255",
            "49672X196X12256",
            "49672X196X12256other",
            "49672X196X12257SQ001",
            "49672X196X12257SQ002",
            "49672X196X12260",
            "49672X196X12261", # interior stair 3
            "49672X196X12262",
            "49672X196X12262other",
            "49672X196X12263",
            "49672X196X12263other",
            "49672X196X12264",
            "49672X196X12264other",
            "49672X196X12265",
            "49672X196X12266",
            "49672X196X12266other",
            "49672X196X12267SQ001",
            "49672X196X12267SQ002",
            "49672X196X12270",
            "49672X196X12271", # interior stair 4
            "49672X196X12272",
            "49672X196X12272other",
            "49672X196X12273",
            "49672X196X12273other",
            "49672X196X12274",
            "49672X196X12274other",
            "49672X196X12275",
            "49672X196X12276",
            "49672X196X12276other",
            "49672X196X12277SQ001",
            "49672X196X12277SQ002",
            "49672X196X12280",
            "49672X196X12281", # interior stair 5
            "49672X196X12282",
            "49672X196X12282other",
            "49672X196X12283",
            "49672X196X12283other",
            "49672X196X12284",
            "49672X196X12284other",
            "49672X196X12285",
            "49672X196X12286",
            "49672X196X12286other",
            "49672X196X12287SQ001",
            "49672X196X12287SQ002",
            "49672X196X12290",
            "49672X196X12291", # interior stair 6
            "49672X196X12292",
            "49672X196X12292other",
            "49672X196X12293",
            "49672X196X12293other",
            "49672X196X12294",
            "49672X196X12294other",
            "49672X196X12295",
            "49672X196X12296",
            "49672X196X12296other",
            "49672X196X12297SQ001",
            "49672X196X12297SQ002",
            "49672X196X12300",
            "49672X196X12301", # interior stair 7
            "49672X196X12302",
            "49672X196X12302other",
            "49672X196X12303",
            "49672X196X12303other",
            "49672X196X12304",
            "49672X196X12304other",
            "49672X196X12305",
            "49672X196X12306",
            "49672X196X12306other",
            "49672X196X12307SQ001",
            "49672X196X12307SQ002",
            "49672X196X12310",
            "49672X196X12587", # interior stair 8
            "49672X196X12588",
            "49672X196X12588other",
            "49672X196X12589",
            "49672X196X12589other",
            "49672X196X12590",
            "49672X196X12590other",
            "49672X196X12591",
            "49672X196X12592",
            "49672X196X12592other",
            "49672X196X12593SQ001",
            "49672X196X12593SQ002",
            "49672X196X12596",
            "49672X196X12311", # interior stair 9
            "49672X196X12312",
            "49672X196X12312other",
            "49672X196X12313",
            "49672X196X12313other",
            "49672X196X12314",
            "49672X196X12314other",
            "49672X196X12315",
            "49672X196X12316",
            "49672X196X12316other",
            "49672X196X12317SQ001",
            "49672X196X12317SQ002",
            "49672X196X12320"]

    def __init__(self, table_row, verbose = False):
        self.table_row = table_row
        if self.table_row[1] is not None and not "SAMPLE" in self.table_row[4]: # entries with no date are corrupted
            (self.participant, token_created, self.pci) = LimeToken.initializeRowImport(self.table_row[:5], 49672)
            
            # skip import if the token is already in the database
            if not token_created:
                return
            else:
                print "Adding token %s for survey %s" %(self.table_row[4], 49672)
                
            # Each function returns an array of objects that will be appended to the existing object array, which is passed into bulk_create at the end
            self.object_array = []
            self.save_HomeInventory()
            
            # Keeping track of created objects
            if verbose:
                print self.object_array

    def save_HomeInventory(self):
        bed_adjustable = True if self.table_row[31] == "Y" else False
        
        if self.table_row[29] is None or self.table_row[29] == "" or self.table_row[29] == "-oth-":
            bed_size = AnswerOption.objects.get_or_create(option = self.table_row[30], table = "HomeInventory", field = "bed_size")[0]
        else:
            bed_size = AnswerOption.objects.get(order = int(self.table_row[29]), table = "HomeInventory", field = "bed_size")            
        
        # get additional participants
        add_participants = []
        for i in range(5,7):
            if self.getToken(self.table_row[i]) is not None:
                participant = self.getToken(self.table_row[i]).participant
                add_participants.append(participant)
        
        tmp = HomeInventory.objects.create( nstories = int(handle_null_or_blank(self.table_row[8],0)),
                                            bed_ht = float(handle_null_or_blank(self.table_row[28],0)) + float(handle_null_or_blank(self.table_row[28],0))*12,
                                            bed_size = bed_size,
                                            bed_adjustable = bed_adjustable, # y/n
                                            home_notes = self.table_row[16]) # noteworthy features
        
        # Contact Instances
        tmp.contact_instance.add(self.pci) # ParticipantContactInstance
        for p in add_participants:
            tmp_pci = ParticipantContactInstance.objects.get_or_create(participant = p, date_of_test = self.table_row[1])[0]
            tmp.contact_instance.add(tmp_pci)

        # Home features
        if self.table_row[9] == "Y":
            tmp.home_features.add( AnswerOption.objects.get(option = "Attic", table = "HomeInventory", field = "home_features"))
        if self.table_row[10] == "Y":
            tmp.home_features.add( AnswerOption.objects.get(option = "Basement", table = "HomeInventory", field = "home_features"))
        if self.table_row[11] == "Y":
            tmp.home_features.add( AnswerOption.objects.get(option = "Crawlspace foundation", table = "HomeInventory", field = "home_features"))
        if self.table_row[12] == "Y":
            tmp.home_features.add( AnswerOption.objects.get(option = "Slab foundation", table = "HomeInventory", field = "home_features"))
        if self.table_row[13] == "Y":
            tmp.home_features.add( AnswerOption.objects.get(option = "Swimming pool (in-ground)", table = "HomeInventory", field = "home_features"))
        if self.table_row[14] == "Y":
            tmp.home_features.add( AnswerOption.objects.get(option = "Swimming pool (above ground)", table = "HomeInventory", field = "home_features"))
        if self.table_row[15] == "Y":
            tmp.home_features.add( AnswerOption.objects.get(option = "Hot tub", table = "HomeInventory", field = "home_features"))
        
        # Home cooling
        if self.table_row[17] == "Y":
            tmp.home_cooling.add( AnswerOption.objects.get(option = "Central A/C", table = "HomeInventory", field = "home_cooling"))
        if self.table_row[18] == "Y":
            tmp.home_cooling.add( AnswerOption.objects.get(option = "Portable A/C", table = "HomeInventory", field = "home_cooling"))
        if self.table_row[19] == "Y":
            tmp.home_cooling.add( AnswerOption.objects.get(option = "Window A/C", table = "HomeInventory", field = "home_cooling"))
        if self.table_row[20] == "Y":
            tmp.home_cooling.add( AnswerOption.objects.get(option = "No A/C (includes fans, etc.)", table = "HomeInventory", field = "home_cooling"))
        if self.table_row[21] is not "" and self.table_row[21] is None:
            tmp.home_cooling.add( AnswerOption.objects.get(option = "Other", table = "HomeInventory", field = "home_cooling"))
            tmp.home_cooling.add( AnswerOption.objects.get_or_create(option = self.table_row[21], table = "HomeInventory", field = "home_cooling")[0])

        # Home heating
        if self.table_row[22] == "Y":
            tmp.home_heating.add( AnswerOption.objects.get(option = "Central heat", table = "HomeInventory", field = "home_heating"))
        if self.table_row[23] == "Y":
            tmp.home_heating.add( AnswerOption.objects.get(option = "Fireplace/wood stove", table = "HomeInventory", field = "home_heating"))
        if self.table_row[24] == "Y":
            tmp.home_heating.add( AnswerOption.objects.get(option = "Portable heater(s)", table = "HomeInventory", field = "home_heating"))
        if self.table_row[25] == "Y":
            tmp.home_heating.add( AnswerOption.objects.get(option = "Radiator(s)", table = "HomeInventory", field = "home_heating"))
        if self.table_row[26] is not "" and self.table_row[26] is None:
            tmp.home_heating.add( AnswerOption.objects.get(option = "Other", table = "HomeInventory", field = "home_heating"))
            tmp.home_heating.add( AnswerOption.objects.get_or_create(option = self.table_row[26], table = "HomeInventory", field = "home_heating")[0])

        # ResidenceEntrance
        entrance_indecies = [42,57,72,87,102,117,132,147,162]
        for ct, i in enumerate(entrance_indecies):
            letter_id = unicode(chr(ord('A') + ct))
            tmp_ent = self.save_ResidenceEntrance(i, letter_id)
            if tmp_ent is not None:
                tmp.entrances.add(tmp_ent)
        
        room_indecies = [187,204,221,238,255,272,299,316,333,350,367,384,411,428,445,462,479,496,523,540,557,574,591,608,635,652,669,686,703,720]
        for ct, i in enumerate(room_indecies):
            tmp_rm = self.save_ResidenceRoom(i, tmp, ct+1)
            if tmp_rm is not None:
                tmp.rooms.add(tmp_rm)

        door_indecies = [743,753,763,773,783,793,809,819,829,839,849,859,875,885,895,905,915,925,941,951,961,971,981,991,1007,1017,1027,1037,1047,1057]
        for i in door_indecies:
            tmp_dr = self.save_ResidenceInteriorDoor(i, tmp)
            if tmp_dr is not None:
                tmp.interior_doors.add(tmp_dr)

        stair_indecies = [1075,1088,1101,1114,1127,1140,1153,1166,1179]
        for i in stair_indecies:
            tmp_str = self.save_ResidenceInteriorStair(i, tmp)
            if tmp_str is not None:
                tmp.interior_stairs.add(tmp_str)

        """
        photo_indecies = []
        for i in photo_indecies:
            tmp_photo = self.save_ResidencePhotograph(i)
            if tmp_photo is not None:
                tmp.photographs.add(tmp_photo)
        """
        tmp.save()
        self.object_array.append(tmp)

    @classmethod
    def getToken(cls, token_nums):
        tokens = LimeToken.objects.filter(token = token_nums)
        if len(tokens) > 0:
            return tokens[0]
        else:
            return None

    # 14 spots
    def save_ResidenceEntrance(self, start_index, letter_id):
        # ValueError = not convertible to int
        # ObjectDoesNotExist = cannot find
        
        if self.table_row[1 + start_index] is not "" and self.table_row[1 + start_index] is not None:
            
            # location
            try:
                location = AnswerOption.objects.get(order = int(self.table_row[1 + start_index]), table = "ResidenceEntrance", field = "location")
            except (TypeError, ValueError, ObjectDoesNotExist):
                location = AnswerOption.objects.get_or_create(option = self.table_row[2 + start_index], table = "ResidenceEntrance", field = "location")[0]
    
            # floor
            try:
                floor = AnswerOption.objects.get(order = int(self.table_row[3 + start_index]), table = "ResidenceEntrance", field = "floor")
            except (TypeError, ValueError, ObjectDoesNotExist):
                floor = AnswerOption.objects.get_or_create(option = self.table_row[4 + start_index], table = "ResidenceEntrance", field = "floor")[0]
            
            # nsteps
            try:
                n_steps = int(self.table_row[5 + start_index])
            except (TypeError, ValueError):
                n_steps = 0
    
            # t_stairs
            try:
                t_stairs = AnswerOption.objects.get(order = int(self.table_row[6 + start_index]), table = "ResidenceEntrance", field = "t_stairs")
            except (TypeError, ValueError, ObjectDoesNotExist):
                t_stairs = AnswerOption.objects.get_or_create(option = self.table_row[7 + start_index], table = "ResidenceEntrance", field = "t_stairs")[0]
    
            # w_door
            try:
                w_door_ft = float(self.table_row[8 + start_index])
            except (TypeError, ValueError):
                w_door_ft = 0
            try:
                w_door_in = float(self.table_row[9 + start_index])
            except (TypeError, ValueError):
                w_door_in = 0
            w_door = w_door_ft*12.0 + w_door_in
    
            # h_thresh
            try:
                h_thresh_opt = int(self.table_row[10 + start_index])
                if h_thresh_opt == 0:
                    raise TypeError
                h_thresh = (h_thresh_opt - 1) * 1.0/8
                comments = ""
            except (TypeError, ValueError):
                h_thresh = -1
                comments = "threshhold height: " + self.table_row[11 + start_index] + ", "
    
            wheelchair_access = False if self.table_row[12 + start_index] == "N" else True
            
            try:
                use_freq = AnswerOption.objects.get(order = int(self.table_row[13 + start_index]), table = "ResidenceEntrance", field = "use_freq")
            except (ObjectDoesNotExist, ValueError):
                use_freq = AnswerOption.objects.get_or_create(option = "Not selected", table = "ResidenceEntrance", field = "use_freq")[0]
                
            comments = comments + self.table_row[14 + start_index]
            
            # save the created object
            tmp = ResidenceEntrance.objects.create(letter_id = letter_id, location = location, floor = floor,
                                                   n_steps = n_steps, t_stairs = t_stairs, w_door = w_door, h_thresh = h_thresh,
                                                   wheelchair_access = wheelchair_access, use_freq = use_freq, comments = comments)
            
            self.object_array.append(tmp)
            return tmp            
        else:
            return None

    """
    - room (17 fields, 30 repeats):
        - FIELDS: type (links); type (other); location (links); location (other); entrance letter (link, including X for none); t_floor(link); t_floor (other); use_freq (link);
                    room width (ft); room width (in); room length (ft); room length (in); power? (y/n); cable? (y/n); phone? (y/n); comments
    """
    def save_ResidenceRoom(self, start_index, current_HomeInventory, room_id):
        if self.table_row[1 + start_index] is not "" and self.table_row[1 + start_index] is not None:
            # room_type
            try:
                room_type = AnswerOption.objects.get(order = int(self.table_row[1 + start_index]), table = "ResidenceRoom", field = "room_type")
            except (TypeError, ValueError, ObjectDoesNotExist):
                room_type = AnswerOption.objects.get_or_create(option = self.table_row[2 + start_index], table = "ResidenceRoom", field = "room_type")[0]

            # location
            try:
                location = AnswerOption.objects.get(order = int(self.table_row[3 + start_index]), table = "ResidenceRoom", field = "location")
            except (TypeError, ValueError, ObjectDoesNotExist):
                location = AnswerOption.objects.get_or_create(option = self.table_row[4 + start_index], table = "ResidenceRoom", field = "location")[0]

            # entrances
            try:
                entrance = current_HomeInventory.entrances.get(letter_id__iexact = self.table_row[5 + start_index])
            except ObjectDoesNotExist:
                entrance = None

            # floor_type
            try:
                floor_type = AnswerOption.objects.get(order = int(self.table_row[6 + start_index]), table = "ResidenceRoom", field = "floor_type")
            except (TypeError, ValueError, ObjectDoesNotExist):
                floor_type = AnswerOption.objects.get_or_create(option = self.table_row[7 + start_index], table = "ResidenceRoom", field = "floor_type")[0]
            
            # use_freq
            try:
                use_freq = AnswerOption.objects.get(order = int(self.table_row[8 + start_index]), table = "ResidenceRoom", field = "use_freq")
            except (ObjectDoesNotExist, ValueError):
                use_freq = AnswerOption.objects.get_or_create(option = "Not selected", table = "ResidenceRoom", field = "use_freq")[0]
            

            # w_room
            try:
                w_room_ft = float(self.table_row[9 + start_index])
            except (TypeError, ValueError):
                w_room_ft = 0
            try:
                w_room_in = float(self.table_row[10 + start_index])
            except (TypeError, ValueError):
                w_room_in = 0
            w_room = w_room_ft*12.0 + w_room_in

            # l_room
            try:
                l_room_ft = float(self.table_row[11 + start_index])
            except (TypeError, ValueError):
                l_room_ft = 0
            try:
                l_room_in = float(self.table_row[12 + start_index])
            except (TypeError, ValueError):
                l_room_in = 0
            l_room = l_room_ft*12.0 + l_room_in
            
            # Comments
            comments = self.table_row[16 + start_index]

            # save the created object
            tmp = ResidenceRoom.objects.create(room_id = room_id, room_type = room_type, location = location,
                                               floor_type = floor_type, use_freq = use_freq, w_room = w_room, l_room = l_room,
                                               comments = comments)
            # Entrance -> Entrances
            if entrance:
                tmp.entrances.add(entrance)

            # Connections
            if self.table_row[13 + start_index] == "Y":
                tmp.connections.add( AnswerOption.objects.get(option = "power", table = "ResidenceRoom", field = "connections"))
            if self.table_row[14 + start_index] == "Y":
                tmp.connections.add( AnswerOption.objects.get(option = "phone", table = "ResidenceRoom", field = "connections"))
            if self.table_row[15 + start_index] == "Y":
                tmp.connections.add( AnswerOption.objects.get(option = "cable", table = "ResidenceRoom", field = "connections"))

            
            self.object_array.append(tmp)
            return tmp
        else:
            return None


    def save_ResidenceInteriorDoor(self, start_index, current_HomeInventory):
        if self.table_row[1 + start_index] is not "" and self.table_row[1 + start_index] is not None:
            comments = ""
            
            # room 1
            try:
                room1 = current_HomeInventory.rooms.get(room_id = int(self.table_row[1 + start_index]))
            except (ValueError, TypeError, ObjectDoesNotExist):
                comments = comments + "Room 1: " + self.table_row[2 + start_index] + ", "
                room1 = None

            # room 2
            try:
                room2 = current_HomeInventory.rooms.get(room_id = int(self.table_row[3 + start_index]))
            except (ValueError, TypeError, ObjectDoesNotExist):
                comments = comments + "Room 2: " + self.table_row[4 + start_index] + ", "
                room2 = None            

            # w_door
            try:
                w_door_ft = float(self.table_row[5 + start_index])
            except (TypeError, ValueError):
                w_door_ft = 0
            try:
                w_door_in = float(self.table_row[6 + start_index])
            except (TypeError, ValueError):
                w_door_in = 0
            w_door = w_door_ft*12.0 + w_door_in

            # h_thresh
            try:
                h_thresh_opt = int(self.table_row[7 + start_index])
                if h_thresh_opt == 0:
                    raise TypeError
                h_thresh = (h_thresh_opt - 1) * 1.0/8
                comments = ""
            except (TypeError, ValueError):
                h_thresh = -1
                comments = comments + "threshhold height: " + self.table_row[8 + start_index] + ", "

            # Comments
            comments = comments + self.table_row[9 + start_index]

            # save the created object
            tmp = ResidenceInteriorDoor.objects.create(room1 = room1, room2 = room2,
                                                   w_door = w_door, h_thresh = h_thresh,
                                                   comments = comments)

            self.object_array.append(tmp)
            return tmp
        else:
            return None
    """
    - interior stair (13 fields, 9 repeats):
        - FIELDS: room 1 (links); room 1 (other); room 2 (links); room 2 (other); location (links); location (other); nsteps; t_stairs(link); t_stairs (other); 
                    narrowest width (ft); narrowest width (in); comments
    """
    def save_ResidenceInteriorStair(self, start_index, current_HomeInventory):
        if self.table_row[1 + start_index] is not "" and self.table_row[1 + start_index] is not None:
            comments = ""
            
            # room 1
            try:
                room1 = current_HomeInventory.rooms.get(room_id = int(self.table_row[1 + start_index]))
            except (ValueError, TypeError, ObjectDoesNotExist):
                comments = comments + "Room 1: " + self.table_row[2 + start_index] + ", "
                room1 = None

            # room 2
            try:
                room2 = current_HomeInventory.rooms.get(room_id = int(self.table_row[3 + start_index]))
            except (ValueError, TypeError, ObjectDoesNotExist):
                comments = comments + "Room 2: " + self.table_row[4 + start_index] + ", "
                room2 = None
            
            # location_description
            try:
                location_description = AnswerOption.objects.get(order = int(self.table_row[5 + start_index]), table = "ResidenceInteriorStair", field = "location_description")
            except (TypeError, ValueError, ObjectDoesNotExist):
                location_description = AnswerOption.objects.get_or_create(option = self.table_row[6 + start_index], table = "ResidenceInteriorStair", field = "location_description")[0]

            # nsteps
            try:
                n_steps = int(self.table_row[7 + start_index])
            except (TypeError, ValueError):
                n_steps = 0
                
            # t_stairs
            try:
                t_stairs = AnswerOption.objects.get(order = int(self.table_row[8 + start_index]), table = "ResidenceInteriorStair", field = "t_stairs")
            except (TypeError, ValueError, ObjectDoesNotExist):
                t_stairs = AnswerOption.objects.get_or_create(option = self.table_row[9 + start_index], table = "ResidenceInteriorStair", field = "t_stairs")[0]

            # narrowest_width
            try:
                narrowest_width_ft = float(self.table_row[10 + start_index])
            except (TypeError, ValueError):
                narrowest_width_ft = 0
            try:
                narrowest_width_in = float(self.table_row[11 + start_index])
            except (TypeError, ValueError):
                narrowest_width_in = 0
            narrowest_width = narrowest_width_ft*12.0 + narrowest_width_in

            # Comments
            comments = comments + self.table_row[12 + start_index]

            # save the created object
            tmp = ResidenceInteriorStair.objects.create(room1 = room1, room2 = room2,
                                                   location_description = location_description, n_steps = n_steps,
                                                   t_stairs = t_stairs, narrowest_width = narrowest_width,
                                                   comments = comments)

            self.object_array.append(tmp)
            return tmp
        else:
            return None


    def save_ResidencePhotograph(self, start_index):
        return None